version: '3'

services:
  redis:
    image: redis:6
    ports:
      - "6379:6379"
    networks:
      - mvs

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mvs

  celery:
    build:
      context: ./MVStudio-Backend
    command: celery -A config worker --loglevel=info
    depends_on:
      - redis
      - rabbitmq
    networks:
      - mvs

  celery-beat:
    build:
      context: ./MVStudio-Backend
    command: celery -A config beat --loglevel=info
    depends_on:
      - redis
      - rabbitmq
    networks:
      - mvs

  flower:
    image: mher/flower:0.9.7
    build:
      context: ./MVStudio-Backend
    working_dir: /MVStudio-Backend
    command: celery flower --port=5555 --broker=$CELERY_BROKER_URL
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery:
        condition: service_started
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
    networks:
      - mvs

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    user: "1000:1000"  # 비루트 사용자로 설정
    command: >
      sh -c "elasticsearch-plugin install analysis-nori &&
             bin/elasticsearch"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - mvs

  backend:
    container_name: MVStudio-Backend
    build:
      context: ./MVStudio-Backend
    volumes:
      - static_volume:/MVStudio-Backend/static
      - ./MVStudio-Backend:/MVStudio-Backend
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - mvs
    restart: always
    command: >
      sh -c "
            python manage.py makemigrations &&
            python manage.py makemigrations member &&
            python manage.py makemigrations music_videos &&
            python manage.py migrate &&
            python manage.py search_index --create &&
            python manage.py search_index --rebuild -f&&
            python manage.py runserver 0.0.0.0:8000"

  frontend:
    container_name: MVStudio-Frontend
    build:
      context: ./MVStudio-Frontend
      dockerfile: Dockerfile
    volumes:
      - ./MVStudio-Frontend/:/MVStudio-Frontend
      - build_folder:/MVStudio-Frontend/dist
      - ./MVStudio-Frontend/node_modules/:/MVStudio-Frontend/node_modules
    depends_on:
      - backend
    tty: true

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
      - build_folder:/var/www/frontend
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - mvs

volumes:
  static_volume:
  build_folder:
  es_data:

networks:
  mvs:
